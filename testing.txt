                              Test Cases
                            =============

1.  No block Normal request

    Config File:    noBlock.ini
    Log File:       noBlock.log

    Description:
    Write request put to delay, but read still goes through
    without waiting. Write request restarted due to outer conflict.
    
    Scenario:
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                
				[request1]
				objectX = 11
				objectXType = person
				objectY = 12
				objectYType = bank
				action = write
				workerDelay = 5
				
				[request2]
				objectX = 11
				objectXType = person
				objectY = 12
				objectYType = bank
				action = read

    Artificial Delays inserted:
    Write request 5 seconds

    Outcome:
    The test passed as expected. Read did not have to wait, write waits
    restarts and then reply sent to client.
    
    Number of allowed accesses: 1   (grep on log: "Allow access")
    Number of denied accesses:  1   (grep on log: "Deny access")

2.  Delayed Commit.

    Config File:    delayedCommit.ini
    Log File:       delayedCommit.log

    Description:
    Read request is delayed at worker so the write request waits for the read to complete.
    Scenario:
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                
                Request:
                [request1]
				objectX = 11
				objectXType = person
				objectY = 12
				objectYType = bank
				action = read
				workerDelay = 5

				[request2]
				objectX = 11
				objectXType = person
				objectY = 12
				objectYType = bank
				action = write

    Artificial Delays inserted:
    Read request 5 seconds

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 1   (grep on log: "Allow access")
    Number of denied accesses:  1   (grep on log: "Deny access")

3.  Request Evaluation restarts due to conflict in defReadAttr

    Config File:    outerConflict.ini
    Log File:       outerConflict.log

    Description:
    Conflicts occurs as the def Read Attr is updated by Write request. Write request
    must restart.
    
    Scenario:   
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                
                [request1]
				objectX = 11
				objectXType = person
				objectY = 12
				objectYType = bank
				action = write
				workerDelay = 5
				
				[request2]
				objectX = 11
				objectXType = person
				objectY = 12
				objectYType = bank
				action = read

    Artificial Delays inserted:
    5 seconds for read request
    
    Outcome:
    The write request was restarted as expected.
    The test passed as expected.
    
    Number of allowed accesses: 1   (grep on log: "Allow access")
    Number of denied accesses:  1   (grep on log: "Deny access")
    Number of conflicts:        1   (grep on log: "conflict")

4.  Request Evaluation restarts due to conflict in mightReadAttr

    Config File:    innerConflict.ini
    Log File:       innerConflict.log

    Description:
    Conflicts occurs as the mightReadAttr is updated by Write request. Write request
    must restart.
    
    Scenario:  
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                
                [request1]
				objectX = 31
				objectXType = incX
				objectY = 32
				objectYType = incY
				action = write
				workerDelay = 2
				
				[request2]
				objectX = 31
				objectXType = incX
				objectY = 32
				objectYType = incY
				action = read
				workerDelay = 4

    Artificial Delays inserted:
    Yes. 2 secs for write and 4 secs for read

    Outcome:
    The test passed as expected.
    Write request was restarted due to pendingMightRead being updated
    Number of allowed accesses: 2   (grep on log: "Allow access")
    Number of denied accesses:  0   (grep on log: "Deny access")
    Number of conflicts:        1   (grep on log: "conflict")

5.  Delayed Commit with incorrect coordinator prediction.

    Config File:    IncorrPred1.ini
    Log File:       IncorrPred1.log

    Description:
    The client incorrectly predicts the coordinator to send the initial request to.
    This results in worker sending reply to coordinator which is non-local.
    
    Scenario:   
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                
				[request1]
				objectX = 41
				objectXType = Tom
				objectY = 42
				objectYType = watch
				action = read
				workerDelay = 5
				
				[request2]
				objectX = 41
				objectXType = Tom
				objectY = 42
				objectYType = watch
				action = write

    Artificial Delays inserted:
    Yes.

    Outcome:
    The test passed as expected. Grep on Log for "Reached non-local coordinator from worker"
    
    Number of allowed accesses: 2   (grep on log: "Allow access")
    Number of denied accesses:  0   (grep on log: "Deny access")


6.  Inner Conflict (MightReadAttr) with incorrect coordinator prediction.

    Config File:    IncorrPred-innerConflict.ini
    Log File:       IncorrPred-innerConflict.log

    Description:
    The client incorrectly predicts the coordinator to send the initial request to.
    This results in worker sending reply to coordinator which is non-local. Also
    there is a conflict detected due to MightReadAttr read by read request and 
    worker updating it 
    
    Scenario:   
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                
				[request1]
				objectX = 51
				objectXType = inc2X
				objectY = 52
				objectYType = inc2Y
				action = write
				workerDelay = 2
				
				[request2]
				objectX = 51
				objectXType = inc2X
				objectY = 52
				objectYType = inc2Y
				action = read
				workerDelay = 4

    Artificial Delays inserted:
    Yes.

    Outcome:
    The test passed as expected. Grep on Log for "Reached non-local coordinator from worker"
    Also grep for "Restart"
    
    Number of allowed accesses: 2   (grep on log: "Allow access")
    Number of denied accesses:  0   (grep on log: "Deny access")

7. Starvation prevention

    Config File:    starvation.ini
    Log File:       starvation.log

    Description:
    
	The write request from client 2 has an artifical delay of 7 seconds and it
	also updates it potentially conflicting atrributes cache (PCA). The read
	request from client 3 has to wait on this PCA to be emptied as its union of
	mightReadAttr and defReadAttr is present in the PCA of request from client 2
    
    Scenario:   
                Number of Clients:          3
                Number of requests sent:    1 (per client)
                
				[client1]
				sequence = request1
				
				[client2]
				sequence = request2
				
				[client3]
				sequence = request1
				
				[request1]
				objectX = 61
				objectXType = starX
				objectY = 62
				objectYType = starY
				action = read
				workerDelay = 1
				
				[request2]
				objectX = 61
				objectXType = starX
				objectY = 62
				objectYType = starY
				action = write
				workerDelay = 7


    Artificial Delays inserted:
    Yes.

    Outcome:
    The test passed as expected. The 3rd clients read request had to wait for the write
    to complete. This is seen from timestamps in the log
    
    Number of allowed accesses: 3   (grep on log: "Allow access")
    Number of denied accesses:  0   (grep on log: "Deny access")
    
8.  Stress Test

	Config File:    stress.ini
    Log File:       stress.log

    Description:
    
	A total of more than 1000 requests in random order are sent from 3 clients
    
    Scenario:   
                Number of Clients:          3
                Number of requests sent:    1103 (total)
                
				[client1]
				sequence = random
				numReq = 1010
				requestList = request1
				seed = 42
				
				[client2]
				sequence = random
				numReq = 100
				requestList = request2
				seed = 42
				
				[client3]
				sequence = request1,request2,request1
				
				[request1]
				objectX = 71
				objectXType = stressX
				objectY = 72
				objectYType = stressY
				action = write
				
				[request2]
				objectX = 61
				objectXType = starX
				objectY = 62
				objectYType = starY
				action = write

    Artificial Delays inserted:
    No.

    Outcome:
    The test passed as expected. All requests run to completion and this can ber verfied
    by checking the DB contents.