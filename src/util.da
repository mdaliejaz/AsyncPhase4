class Request(object):
    def __init__(self, requestID, objectX, objectY, action,
                 isClient, isReadOnly, defReadAttrX, defReadAttrY,
                 mightReadAttrX, mightReadAttrY, objectSwap):
        '''
            Request class.
        '''
        self.requestID = requestID
        self.objectX = objectX
        self.objectY = objectY
        self.action = action
        self.isClient = isClient
        self.fromClient = None
        self.isReadOnly = isReadOnly
        self.sessionIdX = None
        self.sessionIdY = None
        self.defReadAttrX = defReadAttrX
        self.defReadAttrY = defReadAttrY
        self.mightReadAttrX = mightReadAttrX
        self.mightReadAttrY = mightReadAttrY
        self.cachedUpdatesX = {}
        self.cachedUpdatesY = {}
        self.readAttrX = []
        self.readAttrY = []
        self.objectSwap = objectSwap
        self.ts = None

    def __str__(self):
        return "\n\tRequest ID = {}\n\tObjectX = {" \
               "}\n\tObjectY = {}\n\tAction = {}\n\t" \
               "Is Client = {}\n\tFrom client = {}\n\tIs Read Only = {}\n\tSessionIdX = {}\n\tSessionIdY = {}\n\tdefReadAttrY = {}\n\tdefReadAttrY = {}\n\tmightReadAttrX = {}\n\tmightReadAttrY = {}\n\tcachedUpdatesX = {}\n\tcachedUpdatesY = {}\n\treadAttrX = {}\n\treadAttrY = {}\n\tts = {}".format(
            self.requestID, self.objectX, self.objectY, self.action,
            self.isClient, self.fromClient, self.isReadOnly, self.sessionIdX, self.sessionIdY, self.defReadAttrX, self.defReadAttrY, self.mightReadAttrX, self.mightReadAttrY, self.cachedUpdatesX, self.cachedUpdatesY, self.readAttrX, self.readAttrY, self.ts)


class DBResponse(object):
    '''
        DB response class which hold the response which the DB
        sends back to the worker.
    '''

    def __init__(self, request, evaluation, readDbXMap,
                 readDbYMap):
        self.request = request
        self.evaluation = evaluation
        # Maps which contain fields read from DB
        # which are not in cached maps and used for policy evaluation
        self.readDbXMap = readDbXMap
        self.readDbXMap = readDbYMap

    def __str__(self):
        return "{}\n\tEvaluation Result = {}" \
               "\n\Object X Map read from DB = {}" \
               "\n\Object Y Map read from DB = {}".format(
            self.request, self.evaluation, self.readDbXMap,
            self.readDbXMap)


class Response(object):
    '''
        Response class which holds 
    '''

    def __init__(self, request, decision, updatedObj, rdonlydObj):
        self.request = request
        self.decision = decision
        self.updatedObj = updatedObj
        self.rdonlydObj = rdonlydObj
        self.updates = {}

    def __str__(self):
        return "{}" \
               "\n\tDecision = {}" \
               "\n\tUpdated Obj = {}" \
               "\n\tRead only Obj = {}" \
               "\n\tMap with updates = {}".format(
            self.request, self.decision, self.updatedObj,
            self.rdonlydObj, self.updates)


class PolicyRule(object):
    '''
        Class to store each policy rule. Contains 4 maps which are self
        explanatory.
    '''

    def __init__(self, subjectCondition, resourceCondition, subjectUpdate,
                 resourceUpdate):
        self.subjectCondition = subjectCondition
        self.resourceCondition = resourceCondition
        self.subjectUpdate = subjectUpdate
        self.resourceUpdate = resourceUpdate

    def __str__(self):
        return "\n\tSubject Condition = {}" \
               "\n\tResource Condition = {}" \
               "\n\tSubject Update = {}" \
               "\n\tSubject Update = {}".format(
            self.subjectCondition, self.resourceCondition,
            self.subjectUpdate, self.resourceUpdate)
