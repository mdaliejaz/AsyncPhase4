import sys
import da
import xml.etree.ElementTree as ET
import logging
import logging.config
import logging.handlers
from util import PolicyRule
from util import Response
import time


class Worker(process):
    '''
        Setup up the worker by reading policy file
    '''

    def setup(coordinators, dbInstance, config):
        self.logger = logging.getLogger('Log.' + __name__)
        self.coordinators = coordinators
        self.dbInstance = dbInstance
        self.policyMap = {}
        self.size = len(coordinators)
        self.policyFile = config.get("setup", "policyFile")
        readPolicy(self.policyFile)
        self.originalRequest = None

    def receive(msg=('WORKER_ASSIGN', request)):
        self.originalRequest = request
        if request.objectSwap == True:
            temp = request.objectX
            request.objectX = request.objectY
            request.objectY = temp
            temp = request.cachedUpdatesX
            request.cachedUpdatesX = request.cachedUpdatesY
            request.cachedUpdatesY = temp

        logger.info("Sending message to initiate database read for attributes "
                    "not in cache for Request:%s", request)
        send(('GET_FROM_DB', request), to=dbInstance)

    def receive(msg=('DB_RESPONSE', dbresponse)):
        '''
            Receives response from DB, validates rules and send updated
            attributes to subject co-ordinator.
        '''
        logger.info("Received following DB response:%s", dbresponse)
        objectXAttribReqd = dbresponse.readDbObjectXMap.copy()
        objectXAttribReqd.update(dbresponse.request.cachedUpdatesX)
        objectYAttribReqd = dbresponse.readDbObjectYMap.copy()
        objectYAttribReqd.update(dbresponse.request.cachedUpdatesY)

        if self.originalRequest.objectSwap == True:
            self.originalRequest.readAttrX = list(objectYAttribReqd.keys())
            self.originalRequest.readAttrY = list(objectXAttribReqd.keys())
        else:
            self.originalRequest.readAttrX = list(objectXAttribReqd.keys())
            self.originalRequest.readAttrY = list(objectYAttribReqd.keys())

        ruleMatch = False
        for rule in policyMap[dbresponse.request.action]:
            if (validateRule(rule.objectXCondition,
                             objectXAttribReqd,
                             objectXAttribReqd,
                             objectYAttribReqd) and
                    validateRule(rule.objectYCondition,
                                 objectYAttribReqd,
                                 objectXAttribReqd,
                                 objectYAttribReqd)):
                ruleMatch = True
                break

        rdonlydObj = None
        updatedObj = None
        updates = {}
        # If no rule has matched
        if ruleMatch == False:
            dbresponse.evaluation = False
        else:
            # These are the attributes updated
            if rule.objectXUpdate == None:
                rdonlydObj = dbresponse.request.objectX
            else:
                updatedObj = dbresponse.request.objectX
                updates = getUpdatedMaps(rule.objectXUpdate,
                                         objectXAttribReqd,
                                         objectXAttribReqd,
                                         objectYAttribReqd)
            if rule.objectYUpdate == None:
                rdonlydObj = dbresponse.request.objectY
            else:
                updatedObj = dbresponse.request.objectY
                updates = getUpdatedMaps(rule.objectYUpdate,
                                         objectYAttribReqd,
                                         objectXAttribReqd,
                                         objectYAttribReqd)

        if dbresponse.evaluation == False:
            readAttrXMap = self.originalRequest.defReadAttrX.copy()
            readAttrXMap.update(self.originalRequest.mightReadAttrX)
            self.originalRequest.readAttrX = list(readAttrXMap.keys())

            readAttrYMap = self.originalRequest.defReadAttrY.copy()
            readAttrYMap.update(self.originalRequest.mightReadAttrY)
            self.originalRequest.readAttrY = list(readAttrYMap.keys())

        response = Response(self.originalRequest, dbresponse.evaluation,
                            updatedObj, rdonlydObj, updates)

        logger.info("Sending following Worker Response to Subject "
                    "Coordinator:%s", response)

        # id = int(dbresponse.request.subjectID) % self.size
        # # send response back to subject co-ordinator
        # send(('WORKER_RESPONSE', response), to=(coordinators[id]))
        #
        # response = Response(request, None, None, None)
        # response.request = request
        # response.decision = True
        # response.updatedObj = None

        # if response.updatedObj == request.objectX:
        #     response.rdonlydObj = request.objectY
        # elif response.updatedObj == request.objectY:
        #     response.rdonlydObj = request.objectX
        # else:
        #     response.updatedObj = None

        if response.updatedObj is None:
            send(("RESULT_CLIENT", response),
                 to=self.originalRequest.fromClient)
            send(("SENDATTR", self.originalRequest, "X"),
                 to=coordinators[self.originalRequest.objectX % size])
            send(("SENDATTR", self.originalRequest, "Y"),
                 to=coordinators[self.originalRequest.objectY % size])
        else:
            send(("RESULT", response, response.updatedObj),
                 to=coordinators[response.updatedObj % size])

    def getUpdatedMaps(ruleUpdate, attribMap, objectXAttribReqd,
                       objectYAttribReqd):
        '''
            Updates attributes handling cases including ++, --.
            Returns a map of updated attributes and their values.
        '''
        updateMap = {}
        if (ruleUpdate == None):
            return updateMap
        for k, v in ruleUpdate.items():
            if (v == "++"):
                updateMap[k] = str(int(attribMap[k]) + 1)
            elif (v == "--"):
                updateMap[k] = str(int(attribMap[k]) - 1)
            else:
                updateMap[k] = v
                retVal = checkDollar(v, objectXAttribReqd, objectYAttribReqd)
                if retVal is not None:
                    updateMap[k] = retVal
        return updateMap

    def validateRule(conditions, attribMap, objectXAttribReqd,
                     objectYAttribReqd):
        '''
            Validates a policy rule. The subject and resource attribute
            maps are needed to handle the '$' scenario. In such a cases
            we replace the $ atrribute with the value present in maps.
        '''
        for k in conditions.keys():
            # attribSet.add(k)
            policyVal = conditions[k]
            if conditions[k].startswith('$'):
                policyVal = checkDollar(conditions[k],
                                        objectXAttribReqd, objectYAttribReqd)
            if not conditionSatisfied(policyVal, attribMap[k]):
                return False
        return True

    def conditionSatisfied(policyValue, mapValue):
        '''
            Check if policy condition is satisfied. Handles cases
            for <, > and simple strings
        '''
        if ((len(policyValue) > 0 and len(mapValue) > 0) and
                (policyValue[0] == ">" or policyValue[0] == "<")):
            try:
                policyNum = int(policyValue[1:])
                dbNum = int(mapValue)
                if (policyValue[0] == "<"):
                    return policyNum > dbNum
                else:
                    return policyNum < dbNum
            except:
                return False
        else:
            return policyValue == mapValue

    def checkDollar(value, objectXAttribReqd, objectYAttribReqd):
        '''
            Check for $ in attribute value and perform the required
            substitution. Return None if no $ is present in attribute value.
        '''
        if (value.startswith('$')):
            instance, attrib = value.split('.')
            instance = instance[1:]
            if (instance == "resource"):
                return objectYAttribReqd[attrib]
            else:
                return objectXAttribReqd[attrib]

        return None

    def readPolicy(policyFile):
        '''
            Reads the policy XML file and stores it in memory (map)
            This code is the same as what policy.py provided to us.
        '''
        root = ET.parse(policyFile).getroot()

        for rule in root.iter('rule'):
            sc = rule.find('objectXCondition').attrib
            rc = rule.find('objectYCondition').attrib
            act = rule.find('action').attrib
            su = rule.find('objectXUpdate')
            if su != None:
                su = su.attrib
            ru = rule.find('objectYUpdate')
            if ru != None:
                ru = ru.attrib

            if (act["name"] not in self.policyMap):
                self.policyMap[act["name"]] = []
            self.policyMap[act["name"]].append(PolicyRule(sc, rc, su, ru))

    def run():
        logger.info("Started worker to evaluate policy in file: %s",
                    self.policyFile)
        # Can we print the map in a better way!
        logger.debug("Content of Policy File: %s", self.policyMap)
        # Wait till "done" is received to kill gracefully.
        await(received(('done',)))
