import sys
import da
import random
import logging
import logging.config
import logging.handlers
import xml.etree.ElementTree as ET
from util import DBResponse
from threading import Timer


class Database(process):
    def setup(config):
        '''
            Setup the database by read from dbInitFile and
            storing the db in memory.
        '''
        self.logger = logging.getLogger('Log.' + __name__)
        self.dbInitFile = str(config.get("setup", "dbInitFile"))
        self.minDbLatency = int(config.get("setup", "minDbLatency"))
        self.maxDbLatency = int(config.get("setup", "maxDbLatency"))

        self.root = ET.parse(dbInitFile).getroot()
        self.objectMap = {}
        # Initialize a random wait time after which it must commit
        self.waitTime = random.randint(minDbLatency, maxDbLatency)

    def receive(msg=('GET_FROM_DB', request), from_=p):
        '''
            Fetch required attributes from DB which are not in cache
            If attribute not in Db write a empty value
        '''
        logger.info("Received request from Worker to get attributes for "
                    "following request: %s", request)
        evaluation = True
        objectXID = str(request.objectX)
        objectYID = str(request.objectY)
  
        # if no subjectID in Db then write it with empty values
        if objectXID not in self.objectMap:
            self.objectMap[objectXID] = {}
        if objectYID not in self.objectMap:
            self.objectMap[objectYID] = {}
  
        try:
            keyDbReqd = set(self.objectMap[objectXID].keys()) - set(request.cachedUpdatesX.keys())
            XMap = {}
            for k in keyDbReqd:
                for i,tup in enumerate(objectMap[objectXID][k]):
                    if tup[1] > request.ts:
                        break
                XMap[k] = objectMap[objectXID][k][i-1][0]
 
            keyDbReqd = set(self.objectMap[objectYID].keys()) - set(request.cachedUpdatesY.keys())
            
            YMap = {}
            for k in keyDbReqd:
                for i,tup in enumerate(objectMap[objectYID][k]):
                    if tup[1] > request.ts:
                        break
                YMap[k] = objectMap[objectYID][k][i-1][0]
                        
        except:
            # Should never reach here
            evaluation = False
  
        response = DBResponse(request, evaluation, XMap,
                              YMap)
        logger.info("Sending following response to Worker with updated "
                    "attributes from database:%s", response)
        send(('DB_RESPONSE', response), to=p)

    def receive(msg=('COMMIT_TO_DB', response), from_=p):
        for k,v in response.updateMap.items():
            objectMap[response.request.requestID][k].append((v, response.request.ts))
         
     
#     def receive(msg=('COMMIT_TO_DB', updateMap, instance), from_=p):
#         '''
#             Request to commit cache to DB. Threading.timer is used
#             to wait for the random amount of time initialized and then
#             results are written to DB.
#         '''
#         logger.info("Received to update database for %s attributes with map: "
#                     "%s. Accounting DB latency, will wait for latency of "
#                     "value %s units duration before committing to DB",
#                     instance, updateMap, str(self.waitTime))
#         Timer(waitTime, updateFunc, [updateMap, instance]).start()
# 
#     def updateFunc(updateMap, instance):
#         '''
#             Update into DB function
#         '''
#         key = next(iter(updateMap))
#         value = updateMap[key]
#         if (instance == "resource"):
#             self.resourceMap[key].update(value)
#         else:
#             self.subjectMap[key].update(value)
#         logger.info("Successfully updated database for %s attributes "
#                     "with map: %s", instance, updateMap)

    def run():
        '''
            Read from dbInit xml file and store in object maps
        '''
        logger.info("Started Database Instance with dbInitFile = %s, "
                    "Min DB Latency = %s and Max DB Latency = %s",
                    self.dbInitFile, self.minDbLatency, self.maxDbLatency)

        for object in root.iter('object'):
            objectMap[object.attrib['id']] = {}
            for attributes in object:
                for k,v in attributes.attrib.items():
                    objectMap[object.attrib['id']][k] = [(v,0)]
        
        logger.info("Initialized DB with:"
                    "\n\Object Attributes = %s", self.objectMap)
        await(received(('done',)))
        logger.info("Dumping final contents of DB:"
                    "\n\Object Attributes = %s", self.objectMap)
