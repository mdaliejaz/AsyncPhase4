import sys
import da
from util import Request
import logging
import logging.config
import logging.handlers
import queue
import random
import time
import collections
import uuid


class Client(process):
    def setup(coordinators, config, num, dbInstance):
        '''
            Client setup. Generates a sequence of request and puts into a
            queue.
        '''
        self.logger = logging.getLogger('Log.' + __name__)
        self.size = len(coordinators)
        self.requestQueue = queue.Queue()
        self.exit = False
        self.defReadAttrMap = collections.defaultdict(dict)
        self.mightReadAttrMap = collections.defaultdict(dict)
        self.mightWriteObjectMap = collections.defaultdict(dict)
        self.dbInstance = dbInstance
        staticAnalysis()

        sequenceList = []
        sequence = config.get("client" + str(num), "sequence")
        if (sequence == "random"):
            sequenceList = getRandomsequenceList(config, "client" + str(num))
        else:
            sequenceList = sequence.split(',')

        for seq in sequenceList:
            try:
                workerDelay = int(config.get(seq, "workerDelay"))
            except:
                workerDelay = 0
            requestQueue.put([int(config.get(seq, "objectX")),
                              config.get(seq, "objectXType"),
                              int(config.get(seq, "objectY")),
                              config.get(seq, "objectYType"),
                              config.get(seq, "action"),
                              workerDelay])
        # Mark the end of queue
        requestQueue.put(None)

    def getRandomsequenceList(config, client):
        '''
            If sequence is defined as random in config file then
            generate the random sequence using the seed given
        '''
        numReq = int(config.get(client, "numReq"))
        requestList = config.get(client, "requestList").split(',')
        random.seed(int(config.get(client, "seed")))
        sequenceList = []

        for _ in range(0, numReq):
            randInt = random.randint(0, len(requestList) - 1)
            sequenceList.append(requestList[randInt])

        return sequenceList

    def sendToSubjectCoordinator():
        elem = requestQueue.get()
        if (elem == None):
            self.exit = True
            return

        objectX = elem[0]
        objectXType = elem[1]
        objectY = elem[2]
        objectYType = elem[3]
        action = elem[4]
        coordID = (objectX) % self.size
        objectSwap = False
        isReadOnly = True
        defReadAttrX = []
        defReadAttrY = []
        mightReadAttrX = []
        mightReadAttrY = []
        mightWriteAttrX = []
        mightWriteAttrY = []
        workerDelay = elem[5]

        requestID = str(uuid.uuid4())

        if action in self.mightWriteObjectMap:
            if objectXType in self.mightWriteObjectMap[action] and \
                            objectYType in self.mightWriteObjectMap[action]:
                isReadOnly = False
            else:
                if objectXType in self.mightWriteObjectMap[action]:
                    objectSwap = True
                    isReadOnly = False
                elif objectYType in self.mightWriteObjectMap[action]:
                    isReadOnly = False

        if action in self.defReadAttrMap:
            if objectXType in self.defReadAttrMap[action]:
                defReadAttrX = self.defReadAttrMap[action][objectXType]
            if objectYType in self.defReadAttrMap[action]:
                defReadAttrY = self.defReadAttrMap[action][objectYType]
        if action in self.mightReadAttrMap:
            if objectXType in self.mightReadAttrMap[action]:
                mightReadAttrX = self.mightReadAttrMap[action][objectXType]
            if objectYType in self.mightReadAttrMap[action]:
                mightReadAttrY = self.mightReadAttrMap[action][objectYType]
        if action in self.mightWriteObjectMap:
            if objectXType in self.mightWriteObjectMap[action]:
                mightWriteAttrX = self.mightWriteObjectMap[action][objectXType]
            if objectYType in self.mightWriteObjectMap[action]:
                mightWriteAttrY = self.mightWriteObjectMap[action][objectYType]

        request = Request(requestID, objectX, objectY, action, True,
                          isReadOnly, defReadAttrX, defReadAttrY,
                          mightReadAttrX, mightReadAttrY, mightWriteAttrX,
                          mightWriteAttrY, objectSwap, workerDelay)

        logger.info("Sending following request to coordinator\n"
                    "Request{RequestID: %s, Object X: %d, "
                    "Object Y: %d, action: %s}",
                    request.requestID, request.objectX, request.objectY,
                    request.action)
        send(('EVALUATE', request), to=coordinators[coordID])

    def staticAnalysis():

        self.defReadAttrMap["read"]["person"] = ["position"]
        self.defReadAttrMap["read"]["viewer"] = ["position"]
        self.defReadAttrMap["read"]["bank"] = ["id"]
        self.defReadAttrMap["read"]["movie"] = ["viewCount"]
        self.defReadAttrMap["read"]["Tom"] = ["viewCount"]
        self.defReadAttrMap["read"]["stressX"] = ["viewCount"]
        self.defReadAttrMap["read"]["watch"] = ["movie"]
        self.defReadAttrMap["read"]["stressY"] = ["movie"]
        self.defReadAttrMap["read"]["starX"] = ["viewCount"]
        self.defReadAttrMap["read"]["starY"] = ["movie"]
        self.mightReadAttrMap["read"]["person"] = ["history"]
        self.mightReadAttrMap["read"]["incX"] = ["viewCount"]
        self.mightReadAttrMap["read"]["incY"] = ["movie"]
        self.mightReadAttrMap["read"]["inc2X"] = ["viewCount"]
        self.mightReadAttrMap["read"]["inc2Y"] = ["movie"]
        self.mightReadAttrMap["read"]["starX"] = ["history"]

        self.defReadAttrMap["write"]["person"] = ["position"]
        self.defReadAttrMap["write"]["viewer"] = ["position"]
        self.defReadAttrMap["write"]["bank"] = ["id"]
        self.defReadAttrMap["write"]["movie"] = ["viewCount"]
        self.defReadAttrMap["write"]["Tom"] = ["viewCount"]
        self.defReadAttrMap["write"]["stressX"] = ["viewCount"]
        self.defReadAttrMap["write"]["watch"] = ["movie"]
        self.defReadAttrMap["write"]["stressY"] = ["movie"]
        self.defReadAttrMap["write"]["starX"] = ["viewCount", "history"]
        self.defReadAttrMap["write"]["starY"] = ["movie"]
        self.mightReadAttrMap["write"]["person"] = ["history"]
        self.mightReadAttrMap["write"]["incX"] = ["viewCount"]
        self.mightReadAttrMap["write"]["incY"] = ["movie"]
        self.mightReadAttrMap["write"]["inc2Y"] = ["movie"]

        self.mightWriteObjectMap["write"]["person"] = ["history"]
        self.mightWriteObjectMap["write"]["movie"] = ["viewCount"]
        self.mightWriteObjectMap["write"]["viewer"] = ["position"]
        self.mightWriteObjectMap["write"]["Tom"] = ["viewCount"]
        self.mightWriteObjectMap["write"]["stressX"] = ["viewCount"]
        self.mightWriteObjectMap["write"]["watch"] = ["movie"]
        self.mightWriteObjectMap["write"]["stressY"] = ["movie"]
        self.mightWriteObjectMap["write"]["incX"] = ["viewCount"]
        self.mightWriteObjectMap["write"]["inc2Y"] = ["movie"]
        self.mightWriteObjectMap["write"]["starY"] = ["movie"]

    def receive(msg=('RESULT_CLIENT', response)):
        if response.decision:
            print("YES ", response.request.requestID)
            logger.info("Allow access to client %d for Request{RequestID: %s, "
                        "Object X: %d, Object Y: %d, action: %s}",
                        self.num, response.request.requestID,
                        response.request.objectX, response.request.objectY,
                        response.request.action)
        else:
            print("NO", response.request.requestID)
            logger.info("Deny access to client %d for Request{RequestID: %s, "
                        "Object X: %d, Object Y: %d, action: %s}",
                        self.num, response.request.requestID,
                        response.request.objectX, response.request.objectY,
                        response.request.action)
        send(('DUMP_DB',), to=self.dbInstance)

        sendToSubjectCoordinator()

    def run():
        time.sleep(num / 100)
        logger.info("Started Client %d", self.num)
        sendToSubjectCoordinator()
        await(self.exit == True)
