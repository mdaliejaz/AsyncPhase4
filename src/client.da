import sys
import da
from util import Request
import logging
import logging.config
import logging.handlers
import queue
import random
import time
import collections
import uuid


class Client(process):
    def setup(coordinators, config, num):
        '''
            Client setup. Generates a sequence of request and puts into a
            queue.
        '''
        self.logger = logging.getLogger('Log.' + __name__)
        self.size = len(coordinators)
        self.requestQueue = queue.Queue()
        self.exit = False
        self.defReadAttrMap = collections.defaultdict(dict)
        self.mightReadAttrMap = collections.defaultdict(dict)
        self.mightWriteObjectMap = collections.defaultdict(dict)
        staticAnalysis()

        sequenceList = []
        sequence = config.get("client" + str(num), "sequence")
        if (sequence == "random"):
            sequenceList = getRandomsequenceList(config, "client" + str(num))
        else:
            sequenceList = sequence.split(',')

        for seq in sequenceList:
            requestQueue.put([int(config.get(seq, "objectX")), config.get(
                seq, "objectXType"), int(config.get(seq, "objectY")),
                              config.get(seq, "objectYType"),
                              config.get(seq, "action")])
        # Mark the end of queue
        requestQueue.put(None)

    def getRandomsequenceList(config, client):
        '''
            If sequence is defined as random in config file then
            generate the random sequence using the seed given
        '''
        numReq = int(config.get(client, "numReq"))
        requestList = config.get(client, "requestList").split(',')
        random.seed(int(config.get(client, "seed")))
        sequenceList = []

        for _ in range(0, numReq):
            randInt = random.randint(0, len(requestList) - 1)
            sequenceList.append(requestList[randInt])

        return sequenceList

    def sendToSubjectCoordinator():
        elem = requestQueue.get()
        if (elem == None):
            self.exit = True
            return

        objectX = elem[0]
        objectXType = elem[1]
        objectY = elem[2]
        objectYType = elem[3]
        action = elem[4]
        coordID = (objectX) % self.size
        objectSwap = False
        isReadOnly = True
        defReadAttrX = []
        defReadAttrY = []
        mightReadAttrX = []
        mightReadAttrY = []

        print(coordID)
        print(coordinators[coordID])
        # logger.info("Client %d sending Request{Subject ID: %d, Resource ID: "
        #             "%d, action: %s} to coordinator %d", self.num, elem[0],
        #             elem[1], elem[2], coordID)

        requestID = uuid.uuid4()

        if action in self.mightWriteObjectMap:
            if objectXType in self.mightWriteObjectMap[action]:
                coordID = (objectX) % self.size
                objectX = elem[2]
                objectXType = elem[3]
                objectY = elem[0]
                objectYType = elem[1]
                isReadOnly = False
                objectSwap = True
            elif objectYType in self.mightWriteObjectMap[action]:
                isReadOnly = False

        if action in self.defReadAttrMap:
            if objectXType in self.defReadAttrMap[action]:
                print("reached2")
                defReadAttrX = self.defReadAttrMap[action][objectXType]
            if objectYType in self.defReadAttrMap[action]:
                print("reached3")
                defReadAttrY = self.defReadAttrMap[action][objectYType]
        if action in self.mightReadAttrMap:
            if objectXType in self.mightReadAttrMap[action]:
                print("reached4")
                mightReadAttrX = self.mightReadAttrMap[action][objectXType]
            if objectYType in self.mightReadAttrMap[action]:
                print("reached5")
                mightReadAttrY = self.mightReadAttrMap[action][objectYType]

        print(defReadAttrX)
        print(defReadAttrY)
        print(mightReadAttrX)
        print(mightReadAttrY)
        request = Request(requestID, objectX, objectY, action, True,
                          isReadOnly, defReadAttrX, defReadAttrY,
                          mightReadAttrX, mightReadAttrY, objectSwap)
        print(request)

        send(('EVALUATE', request), to=coordinators[coordID])
        # start timer
        # if timeout rescedule

    def staticAnalysis():
        self.defReadAttrMap["read"]["person"] = ["position", "history"]
        self.defReadAttrMap["read"]["bank"] = ["id"]
        self.defReadAttrMap["view"]["person"] = ["position"]
        self.defReadAttrMap["view"]["movie"] = ["viewCount"]
        self.mightReadAttrMap["read"]["bank"] = ["account"]
        self.mightWriteObjectMap["view"]["movie"] = True
        self.mightWriteObjectMap["read"]["person"] = True

    def receive(msg=('RESULT_CLIENT', response)):
        # stop timer
        if response.decision:
            print("YES")
        # logger.info("Allow access to client %d for Request{Subject ID: "
        #                         "%d, Resource ID: %d, action: %s}", self.num, subjectID,
        #                         resourceID, action)
        else:
            pass
        # logger.info("Deny access to client %d for Request{Subject ID: "
        #                         "%d, Resource ID: %d, action: %s}", self.num, subjectID,
        #                         resourceID, action)

        sendToSubjectCoordinator()

    def run():
        logger.info("Started Client %d", self.num)
        sendToSubjectCoordinator()
        await(self.exit == True)
